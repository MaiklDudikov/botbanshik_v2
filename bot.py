import logging
from aiogram import Bot, Dispatcher, executor, types
from banshiki import SQbanshik
import random

API_TOKEN = '5119965890:AAGlVxqvhTB9gNCxU8YMixjlSUqByrzI0zc'
# log level
logging.basicConfig(level=logging.INFO)
# bot init
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

db = SQbanshik('database.db')


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç üòâ {message.from_user.full_name} !\n–¢–≤–æ–π ID : "
                         f"{message.from_user.id}")

    if not db.banshik_exists(message.from_user.id):
        db.add_human(message.from_user.id, message.from_user.full_name)
        await message.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö !")
    else:
        await message.answer("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç !")

    await message.answer("–ü–æ–º–æ—â—å /help")


@dp.message_handler(commands=['info'])
async def info(message: types.Message):
    await message.answer(
        "/–±–∞–Ω—è\n–¢—ã –∏–¥–µ—à—å —Å–µ–≥–æ–¥–Ω—è –≤ –±–∞–Ω—é ?\n\n"
        "/how_much_today\n–°–∫–æ–ª—å–∫–æ —Å–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è –≤ –∫—É–±—ã—à–∫—É ?\n\n"
        "/total_go_people\n–ö—Ç–æ –∏–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ –±–∞–Ω—é ?\n\n"
        "/total_many_people\n–ö—Ç–æ, —Å–∫–æ–ª—å–∫–æ —Å–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è –≤ –∫—É–±—ã—à–∫—É ?\n\n"
        "/update_all\n–û–±–Ω–æ–≤–∏—Ç—å —É –≤—Å–µ—Ö, –ø–æ—Å–ª–µ –ø–æ—Ö–æ–¥–∞ –≤ –±–∞–Ω—é, –ò–õ–¨–Ø –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û !\n\n"
        "/–∫—É–±—ã—à–∫–∞\n–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –≤ –∫—É–±—ã—à–∫–µ ?\n\n"
    )


@dp.message_handler(commands=['help'])
async def help_me(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    item1 = types.KeyboardButton('/–±–∞–Ω—è üçª')
    item2 = types.KeyboardButton('/total_go_people üèÉ')
    item3 = types.KeyboardButton('/how_much_today ‚ùì')
    item4 = types.KeyboardButton('/total_many_people')
    item5 = types.KeyboardButton('/info ‚Ñπ')
    item6 = types.KeyboardButton('/–∫—É–±—ã—à–∫–∞ üíµ')
    item7 = types.KeyboardButton('/help üÜò')
    item8 = types.KeyboardButton('/–≤–µ–Ω–∏–∫–∏ ü•¨')
    item9 = types.KeyboardButton('/—Ä–∞–Ω–¥–æ–º üé≤ –æ—Ç 0 –¥–æ 15 üç∫ –ø–∏–≤–Ω–∞—è –ª–æ—Ç–µ—Ä–µ—è ')
    markup.add(item1, item2, item3, item4, item5, item6, item7, item8, item9)
    await message.answer("–í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π", reply_markup=markup)


@dp.message_handler(commands=['—Ä–∞–Ω–¥–æ–º'])
async def randomize(message: types.Message):
    await bot.send_message(message.chat.id, "–í—ã–∏–≥—Ä–∞–ª –Ω–æ–º–µ—Ä : {0}".format(random.randint(0, 15)))


@dp.message_handler(commands=['–±–∞–Ω—è'])
async def go_bath_house(message: types.Message):
    await message.answer("–ü–æ–π–¥—ë—à—å —Å–µ–≥–æ–¥–Ω—è –≤ –±–∞–Ω—é ? /yes   /no")


@dp.message_handler(commands=['yes'])
async def yes_bath(message: types.Message):
    await message.answer("–ó–∞–ø–∏—Å–∞–ª üòâ")
    db.update_bath('–¥–∞', message.from_user.id)


@dp.message_handler(commands=['no'])
async def no_bath(message: types.Message):
    await message.answer("–ó–∞–ø–∏—Å–∞–ª üòâ")
    db.update_bath('–Ω–µ—Ç', message.from_user.id)


@dp.message_handler(commands=['update_all_bath_house'])
async def update_all_bath_house(message: types.Message):
    await message.answer("–û–±–Ω–æ–≤–∏–ª !")
    db.update_everyone_bath_house('?')


@dp.message_handler(commands=['how_much_today'])
async def how_much_today(message: types.Message):
    await message.answer("–°–∫–æ–ª—å–∫–æ —Å–¥–∞–ª —Å–µ–≥–æ–¥–Ω—è –≤ –∫—É–±—ã—à–∫—É ?\n /0   /50   /100   /150")


@dp.message_handler(commands=['0'])
async def zero(message: types.Message):
    await message.answer("–ó–∞–ø–∏—Å–∞–ª üòâ")
    db.update_amount(0, message.from_user.id)
    db.add_kubyshka(0)


@dp.message_handler(commands=['50'])
async def fifty(message: types.Message):
    await message.answer("–ó–∞–ø–∏—Å–∞–ª üòâ")
    db.update_amount(50, message.from_user.id)
    db.add_kubyshka(50)


@dp.message_handler(commands=['100'])
async def hundred(message: types.Message):
    await message.answer("–ó–∞–ø–∏—Å–∞–ª üòâ")
    db.update_amount(100, message.from_user.id)
    db.add_kubyshka(100)


@dp.message_handler(commands=['150'])
async def one_hundred_fifty(message: types.Message):
    await message.answer("–ó–∞–ø–∏—Å–∞–ª üòâ")
    db.update_amount(150, message.from_user.id)
    db.add_kubyshka(150)


@dp.message_handler(commands=['–≤–µ–Ω–∏–∫–∏'])
async def brooms(message: types.Message):
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∑—è–ª–∏ –Ω–∞ –≤–µ–Ω–∏–∫–∏ ?\n /_100   /_150   /_300")


@dp.message_handler(commands=['_100'])
async def minus_hundred(message: types.Message):
    await message.answer("–ó–∞–ø–∏—Å–∞–ª üòâ")
    db.delete_kubyshka(100)


@dp.message_handler(commands=['_150'])
async def minus_one_hundred_fifty(message: types.Message):
    await message.answer("–ó–∞–ø–∏—Å–∞–ª üòâ")
    db.delete_kubyshka(150)


@dp.message_handler(commands=['_300'])
async def minus_three_hundred(message: types.Message):
    await message.answer("–ó–∞–ø–∏—Å–∞–ª üòâ")
    db.delete_kubyshka(300)


@dp.message_handler(commands=['update_all_amount'])
async def update_all_amount(message: types.Message):
    await message.answer("–û–±–Ω–æ–≤–∏–ª !")
    db.update_everyone_amount(0)


@dp.message_handler(commands=['total_go_people'])
async def total_go_people(message: types.Message):
    await message.answer(f"–í–æ—Ç –∫—Ç–æ –∏–¥–µ—Ç —Å–µ–≥–æ–¥–Ω—è –≤ –±–∞–Ω—é :\n\n {db.get_bath()}")


@dp.message_handler(commands=['total_many_people'])
async def total_many_people(message: types.Message):
    await message.answer(f"–°–µ–≥–æ–¥–Ω—è —Å–¥–∞–ª–∏ :\n\n {db.get_amount()}")


@dp.message_handler(commands=['–∫—É–±—ã—à–∫–∞'])
async def total_kubyshka(message: types.Message):
    await message.answer(f"–í—Å–µ–≥–æ –≤ –∫—É–±—ã—à–∫–µ :\n {db.get_kubyshka()} –º–æ–Ω–µ—Ç–æ–∫")


# run long-polling # False, –µ—Å–ª–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
